/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package eetorc;


import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author jackson
 */
public class MainWindow extends javax.swing.JFrame
{
    private ArrayList<RunningEvent> events;
    private String currentEvent;
    private String currentHeat;
    private Integer roundNum, heatNum, eventNum;
    private boolean evtImported, lifImported;
    private File lifFile;
    private File evtFile;
    
    /**
     * Creates new form MainWindow
     */
    public MainWindow(ArrayList<RunningEvent> list) {
        evtImported = false;
        lifImported = false;
        
        events = list;
        
        initComponents();       
        
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("combinedicon.png")));
        this.setVisible(true);                              
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem4 = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();

        jMenuItem4.setText("jMenuItem4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("EEtoRC");

        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setText("Eagle Eye to RunnerCard Beta 0.0.6");

        jLabel3.setText("*********************************************************************");

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel5.setText("Messages:");

        jLabel6.setText("There are no messages to display. ");

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eetorc/runnercard-logo_man.png"))); // NOI18N

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eetorc/icon.jpg"))); // NOI18N

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eetorc/Arrow--NicholasJudy456-300px_1.png"))); // NOI18N

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eetorc/racreglogo.png"))); // NOI18N

        jLabel4.setFont(new java.awt.Font("Dialog", 2, 12)); // NOI18N
        jLabel4.setText("Made by:");

        jLabel7.setText("http://racereg.jimdo.com");

        jMenu1.setText("File");

        jMenu3.setText("Import");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eetorc/runnercardicon.png"))); // NOI18N
        jMenuItem1.setText("Import .evt");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setIcon(new javax.swing.ImageIcon("/home/jackson/NetBeansProjects/EEtoRC/src/eetorc/eagleeyeicon.jpg")); // NOI18N
        jMenuItem2.setText("Import .lif");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenu1.add(jMenu3);

        jMenu4.setText("Export");

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eetorc/runnercardicon.png"))); // NOI18N
        jMenuItem6.setText("Export .lif for RunnerCard");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem6);

        jMenu1.add(jMenu4);

        jMenuItem10.setText("Exit");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem10);

        jMenuBar1.add(jMenu1);

        jMenu5.setText("Display");

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem7.setText(".evt Import");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem7);

        jMenuItem8.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem8.setText(".lif Import");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem8);

        jMenuItem9.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eetorc/arrowicon.png"))); // NOI18N
        jMenuItem9.setText(".lif/.evt Combination");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem9);

        jMenuBar1.add(jMenu5);

        jMenu2.setText("Help");

        jMenuItem5.setText("Contact");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("About");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(79, 79, 79)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(21, 21, 21)))))
                .addGap(50, 54, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel11))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addGap(20, 20, 20))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        //Begin import of .evt
        
        //Developer notes/tests:
        //System.out.println("events current size: " + events.size());            
        
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Lynx Event File (.evt)", "evt");
        chooser.setFileFilter(filter);
        
            File importFile = null;
            //Importing acutally begins here. 
            try{
                boolean retry = true;
                
                do{
                    if(chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION)
                    {
                        importFile = chooser.getSelectedFile();
                        retry = false;
                    }
                    else
                        JOptionPane.showMessageDialog(null, "You selected no file. You must select a file.", "Error", JOptionPane.ERROR_MESSAGE);
                }while(retry);

                    FileReader filein = new FileReader(importFile);
                    BufferedReader reader = new BufferedReader(filein);

                    String lines = "";
                    
                    do{
                        lines = reader.readLine();
                        //System.out.println("Current Line: " + lines);
                        if(lines == null || lines.equals(""))
                        {
                            //System.out.println("Ignoring Blank Line");
                        }
                        else if(lines!= null)
                        {
                            int t = lines.charAt(0);
                            if(t == ';')
                            {
                                //System.out.println("Ignoring commented line.");
                            }
                            else if(t >= 48 && t <= 57)
                            {
                                //Detection of new heat/event
                                String [] qualities = lines.split(",");
//                                for(int i = 0; i < qualities.length; i++)
//                                {
//                                    //System.out.println(i + ": " + qualities[i]);
//                                }
                                
                                //Set the current event and current heat. 
                                currentEvent = qualities[0];
                                currentHeat = qualities[2];
                                
                                //Check if event excists
                                boolean excists = false;
                                int index = -1;
                                for(int i = 0; i < events.size(); i++)
                                {
                                    if(Integer.parseInt(qualities[0]) == events.get(i).getEventID())
                                    {
                                        excists = true;
                                        index = i;
                                    }
                                }
                                
                                //If event doesn't excist, create it!
                                if(!excists)
                                {
                                    RunningEvent newEvent = new RunningEvent(qualities[0], qualities[1], qualities[2], qualities[3], qualities[9]);
                                    events.add(newEvent);
                                }
                                else
                                {
                                    events.get(index).addHeat(qualities[2]);
                                } 
                            }
                            else
                            {
                                //One will have reached here if we are adding a racer. 
                                
                                //Split qualities
                                String [] qualities = lines.split(",");
//                                for(int i = 0; i < qualities.length; i++)
//                                {
//                                    //System.out.println(i + ": " + qualities[i]);
//                                }
                                
                                Runner temp = null;
                                //Create runner
                                try
                                {
                                   temp = new Runner(Integer.parseInt(qualities[1]), Integer.parseInt(qualities[2]), qualities[3], qualities[4], qualities[5]); 
                                }catch(java.lang.NumberFormatException e)
                                {
                                    //If there is no entry for lane or ID we jump here. 
                                    if(qualities[1].equals("") && qualities[2].equals(""))
                                    {
                                        temp = new Runner(0, 0, qualities[3], qualities[4], qualities[5]); 
                                    }
                                    else if(qualities[1].equals(""))
                                    {
                                        temp = new Runner(0, Integer.parseInt(qualities[2]), qualities[3], qualities[4], qualities[5]); 
                                    }
                                    else if(qualities[2].equals(""))
                                    {
                                        temp = new Runner(Integer.parseInt(qualities[1]), 0, qualities[3], qualities[4], qualities[5]); 
                                    }
                                }
                                
                                
                                //Add to correct event & heat
                                for(int i = 0; i < events.size(); i++)
                                {
                                    if(events.get(i).getEventID() == Integer.parseInt(currentEvent))
                                    {
                                        events.get(i).addRunnerToHeat(currentHeat, temp);
                                    }
                                }                                                                                                
                            }
                        }
                    }while(lines != null);
                    
                    //System.out.println("IMPORT COMPLETED.");
 
                    reader.close();
                    
                    evtImported = true;
                    setMessage();
                    
            }
            catch(FileNotFoundException e)
            {
                JOptionPane.showMessageDialog(null, "There was an extreme error. Closing program.", "Import FAIL", JOptionPane.ERROR_MESSAGE);
                System.exit(1);
            } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
            
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        String about = "This program will take a timing results file (.lif) from EagleEyeDV and\nmake it readable for RunnerCard Track and Field.\nThis program also serves as a .lif reader.\nDevelopment is still in progress.";
        
        JOptionPane.showMessageDialog(this, "EEtoRC\nVersion 0.0.1 (Beta)\nDeveloper: Jackson Porter\n\nClick Help for Contact/More Information\n\n" + about, "About", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        JOptionPane.showMessageDialog(this, "Please contact:\nJackson Porter\njackson_porter@outlook.com", "Help", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        if(!evtImported && !lifImported)
        {
            JOptionPane.showMessageDialog(this, "NO .evt or .lif IMPORTED!", "Import Error", JOptionPane.ERROR_MESSAGE);
        }
        else if(!evtImported)
        {
            JOptionPane.showMessageDialog(this, "NO .evt IMPORTED!", "Import Error", JOptionPane.ERROR_MESSAGE);
        }
        else if(!lifImported)
        {
            JOptionPane.showMessageDialog(this, "NO .lif IMPORTED!", "Import Error", JOptionPane.ERROR_MESSAGE);
        }
        else
        {
            //Launch loading window
            PleaseWaitWin plw = new PleaseWaitWin();
            plw.setVisible(true);
        
            //Create lif file
            //Now the the lif file has been organzied and the .evt has been imported, we can print a correct .lif file for runnercard to read. 
                
            try
            {
                JFileChooser chooser = new JFileChooser();
                FileNameExtensionFilter filter = new FileNameExtensionFilter("Lynx Results File (.lif)", "lif");
                chooser.setFileFilter(filter);
                
                File results = null;
                boolean flag = true;            

                JOptionPane.showMessageDialog(this, "Please select the correct folder on the Computer running \nRunnerCard Track and Field Server for the .lif file.");
                do
                {
                   if(chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION)
                   {
                       results = chooser.getSelectedFile();
                       File tempFile = new File(results.toString()+".lif");
                       results = tempFile;
                       flag = false;
                   }
                   else
                   {
                       JOptionPane.showMessageDialog(null, "You must select a destination.", "Saving File", JOptionPane.ERROR_MESSAGE);
                   }
                }while(flag);


                    FileWriter fileout = new FileWriter(results);
                    BufferedWriter writer = new BufferedWriter(fileout);

                    //System.out.println("I'm ready to write!");

                    String toWrite = "";

                    //Save first line (event info, round info, heat info)
                    toWrite += events.get(eventNum).getEventID() + ",";
                    toWrite += events.get(eventNum).getRoundID() + ",";
                    toWrite += events.get(eventNum).returnHeatByID(heatNum).getHeatNum() + ",";
                    toWrite += events.get(eventNum).getName() + ",";
                    toWrite += ",,,,,";
                    toWrite += events.get(eventNum).getEventType() + ",";
                    writer.write(toWrite + "\n");

                    //Write result lines
                    toWrite =  events.get(eventNum).returnHeatByID(heatNum).getLifInfo();                                
                    writer.write(toWrite);



                    writer.close();
                    
                    JOptionPane.showMessageDialog(null, "LIF generated. Program now closing.", "LIF generation completed.", JOptionPane.INFORMATION_MESSAGE);                    
                }catch(IOException ex)
                {
                    //System.out.println("There was an error - PROGRAM CRASH!");
                    ex.printStackTrace();
                }
        }
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        //Developer notes/tests:
        //System.out.println("events current size: " + events.size());

        
        //Warn user
        //JOptionPane.showMessageDialog(this, "Click OK to begin (Eagle Eye) .lif import.", "Import .lif", JOptionPane.INFORMATION_MESSAGE);
        
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Lynx Results File (.lif)", "lif");
        chooser.setFileFilter(filter);
            File importFile = null;
            //Importing acutally begins here. 
            try{
                boolean retry = true;
                
                do{
                    if(chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION)
                    {
                        importFile = chooser.getSelectedFile();
                        lifFile = importFile;
                        retry = false;
                    }
                    else
                        setMessage();
                }while(retry);

                    FileReader filein = new FileReader(importFile);
                    BufferedReader reader = new BufferedReader(filein);

                    String lines = "";
                    
                    
                    lines = reader.readLine();
                    //Event, round and heat information must be on the first line to pass here.
                    //Split qualities for event/round/heat
                    String [] eventQualities = lines.split(",");
                    for(int i = 0; i < eventQualities.length; i++)
                    {
                        //System.out.println("EventQua-" + i + ": " + eventQualities[i]);
                        
                    }
                    
                    eventNum = -1;
                    
                    //Search the .evt database for the event. 
                    for(int k = 0; k < events.size(); k++)
                    {
                        if(events.get(k).getEventID() == Integer.parseInt(eventQualities[0]))
                        {
                            eventNum = k;
                        }
                    }
                    
                    //Check to see if event was found
                    if(eventNum < 0)
                    {
                        JOptionPane.showMessageDialog(this, "A Serious Error has occured. This event does not excist!", "Error", JOptionPane.ERROR_MESSAGE);
                        System.exit(1);
                    }
                    
                    roundNum = Integer.parseInt(eventQualities[1]);
                    heatNum = Integer.parseInt(eventQualities[2]);
                    
                    //There may be more information in the lif file, but we DO NOT NEED IT for RunnerCard.***
                    //We will use the above variable (lifEvent) for THIS lif file. 
                    do{
                        lines = reader.readLine();
                        //System.out.println("Current Line: " + lines);
                        if(lines == null || lines.equals(""))
                        {
                            //System.out.println("Ignoring Blank Line");
                        }
                        else if(lines!= null)
                        {
                            int t = lines.charAt(0);
                            if(t == ';')
                            {
                                //System.out.println("Ignoring commented line.");
                            }                            
                            else
                            {
                                //One will have reached here if we are adding a time.
                                
                                //Split qualities
                                String [] qualities = lines.split(",");
//                                for(int i = 0; i < qualities.length; i++)
//                                {
//                                    //System.out.println(i + ": " + qualities[i]);
//                                }                                                               
                                
                                //CHECK FOR NO TIME
                                if(qualities[0] != null)
                                {
                                    if(qualities[0] == "TBA" || qualities[0] == "DNS")
                                    {
                                        //System.out.println("NO TIME!");
                                        events.get(eventNum).returnHeatByID(heatNum).addTimeToRunner(qualities[2], "");
                                    }
                                    else
                                    {
                                        try
                                        {
                                            //We still won't save their place as we will generate it later. 
                                            events.get(eventNum).returnHeatByID(heatNum).addTimeToRunner(qualities[2], qualities[6]);  
                                        }catch(java.lang.ArrayIndexOutOfBoundsException e)
                                        {
                                            //We assume here that a time is completely missing from the file. 
                                            //We will eventually add support if lane number is missing. 
                                            events.get(eventNum).returnHeatByID(heatNum).addTimeToRunner(qualities[2], "");
                                        }
                                        
                                        
                                        
                                    }
                                }
                                else
                                {
                                    events.get(eventNum).returnHeatByID(heatNum).addTimeToRunner(qualities[2], qualities[6]);                               
                                }                                                                                                                                                                                                                                                        
                            }
                        }
                    }while(lines != null);
                                        
                    //Close reader
                    reader.close();                    
                    
                    //Set lif flag to true and display message.
                    lifImported = true;
                    setMessage();                                        
            }
            catch(FileNotFoundException e){
                //System.out.println("There was an extreme error.");
            } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }                        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        if(events.size() == 0)
        {
            JOptionPane.showMessageDialog(this, "NO .evt IMPORTED!", "Import Error", JOptionPane.ERROR_MESSAGE);
        }
        else
        {
            //Developer notes/tests:
            //System.out.println("events current size: " + events.size());

            //Send information to importwindow
            String toDisplay = "";

            //Create toDisplay String
            for(int i = 0; i < events.size(); i++)
            {
                //Display Event Info
                toDisplay += events.get(i).getName() + ", ID: " + events.get(i).getEventID() + "\n";
                toDisplay += events.get(i).getInfo();
            }

            //System.out.println("DISPLAY:\n" + toDisplay);

            ImportWindow importWin = new ImportWindow(toDisplay);
        }
        
        
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        JOptionPane.showMessageDialog(this, "WARNING! This feature is still in development.", "Import Error", JOptionPane.ERROR_MESSAGE);
        
        String eventName = "";
        String roundNumber = "";
        String heatNumber = "";
        
        
        
        


        //This will set the message in the importWindow. 
        if(lifImported == false)
        {
            JOptionPane.showMessageDialog(this, "NO .lif IMPORTED!", "Import Error", JOptionPane.ERROR_MESSAGE);
        }
        else
        {
            //Obtain information from .lif file
            FileReader filein = null;
            try {
                filein = new FileReader(lifFile);
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "A severe error occured. Program closing.", "ERROR", JOptionPane.ERROR_MESSAGE);
                System.exit(1);
            }
            BufferedReader reader = new BufferedReader(filein);
            
            String lines = "";
                    
                    
            try {           
                lines = reader.readLine();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "A severe error occured. Program closing.", "ERROR", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);                
                System.exit(1);
            }
            
            //Split qualities for event/round/heat
            String [] eventQualities = lines.split(",");
            
            eventName = eventQualities[0];
            roundNumber = eventQualities[1];
            heatNumber = eventQualities[2];           
            
            ArrayList<Runner> tempRunners = new ArrayList<Runner>();
            
            
            
            
            
            do{
                try {
                    lines = reader.readLine();
                } catch (IOException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
                //System.out.println("Current Line: " + lines);
                if(lines == null || lines.equals(""))
                {
                    //System.out.println("Ignoring Blank Line");
                }
                else if(lines!= null)
                {
                    int t = lines.charAt(0);
                    if(t == ';')
                    {
                        //System.out.println("Ignoring commented line.");
                    }                            
                    else
                    {
                        //One will have reached here if we have found a time.

                        //Split qualities
                        String [] qualities = lines.split(",");
                        for(int i = 0; i < qualities.length; i++)
                        {
                            System.out.println(i + ": " + qualities[i]);
                        }                                                               
                        
                        try
                        {
                            Runner tempRunner = new Runner(0, Integer.parseInt(qualities[2]), "", "", "", qualities[6]);
                            tempRunners.add(tempRunner);
                        }
                        catch(java.lang.ArrayIndexOutOfBoundsException e)
                        {
                            //Assuming there was no time here. 
                            Runner tempRunner = new Runner(0, Integer.parseInt(qualities[2]), "", "", "", "");
                            tempRunners.add(tempRunner);
                        }
                        
                        
                    }
                }
            }while(lines != null);

            try {
                //Close reader
                reader.close();
            } catch (IOException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
                                                                     

            //Assign each Runner a place and sort by lane #. 
            tempRunners = addPlaceSortByLane(tempRunners);
            
            //Add the runners/info to the display and create display. 
            LifWindow lifWindow = new LifWindow(this);
            lifWindow.setEventName(eventName);
            lifWindow.setRoundID(Integer.parseInt(roundNumber));
            lifWindow.setHeatID(Integer.parseInt(heatNumber));
            
            
            for(int k = 0; k < tempRunners.size(); k++)
            {
                lifWindow.addRow(tempRunners.get(k).getLane().toString(), tempRunners.get(k).getPlace(), tempRunners.get(k).getTime().toString());
            }
        }
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        JOptionPane.showMessageDialog(this, "WARNING! This feature is still in development.", "Import Error", JOptionPane.ERROR_MESSAGE);

        if(!evtImported && !lifImported)
        {
            JOptionPane.showMessageDialog(this, "NO .evt or .lif IMPORTED!", "Import Error", JOptionPane.ERROR_MESSAGE);
        }
        else if(!evtImported)
        {
            JOptionPane.showMessageDialog(this, "NO .evt IMPORTED!", "Import Error", JOptionPane.ERROR_MESSAGE);
        }
        else if(!lifImported)
        {
            JOptionPane.showMessageDialog(this, "NO .lif IMPORTED!", "Import Error", JOptionPane.ERROR_MESSAGE);
        }
        else
        {
            //Launch loading window
            PleaseWaitWin plw = new PleaseWaitWin();
            plw.setVisible(true);

            //Create lifwindow instance
            CombinedWindow displayWin = new CombinedWindow(this);

            ArrayList<Runner> tempRunners = events.get(eventNum).returnHeatByID(heatNum).getRunnersByLane();

            for(int k = 0; k < tempRunners.size(); k++)
            {
                displayWin.addRow(tempRunners.get(k).getLane() + "", tempRunners.get(k).getPlace() + "", tempRunners.get(k).getLastName(), tempRunners.get(k).getFirstName(), tempRunners.get(k).getTime().toString());
            }
            
           //Display event information.
            displayWin.setEventName(events.get(eventNum).getName());
            //Once roundIDs are implemented, this line will have to be fixed.
            displayWin.setRoundID(events.get(eventNum).getRoundID());
            displayWin.setHeatID(heatNum);
            

            //hide loading window
            plw.setVisible(false);
            displayWin.setVisible(true);
        }
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    //*** RunnerCard import is changing. This may have to be modified. 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    // End of variables declaration//GEN-END:variables

    private void setMessage() {
        if(evtImported && lifImported)
        {
            jLabel6.setText(".evt and .lif files successfully imported.");
        }
        else if(evtImported)
        {
            jLabel6.setText(".evt file successfully imported.");
        }
        else if(lifImported)
        {
            jLabel6.setText(".lif file successfully imported.");
        }
        else
        {
            jLabel6.setText("There are no messages to display.");
        }
    }
    
    private File getLifFile()
    {
        return lifFile;
    }
    
    private ArrayList<Runner> addPlaceSortByLane(ArrayList<Runner> list)
    {
        //This method can only be called once each racer has a time. 
        ArrayList<Runner> temp = new ArrayList<Runner>();
        ArrayList<Runner> temp2 = new ArrayList<Runner>();
        ArrayList<Runner> noTimesTemp = new ArrayList<Runner>();
        
        
        while(list.size() != 0)
        {           
            int index = 0;
            Runner top = null;
            boolean noTime = false;
            
            for(int i = 0; i < list.size(); i++)
            {
                //Check to see if we are the first item
                if(top == null)
                {
                    if(list.get(i).getTime().returnTotalTimeSeconds() == -1.00)
                    {
                        noTime = true;
                        index = i;
                        break;
                    }
                    else
                    {
                        top = list.get(i);
                        index = 0;  
                    }                                     
                }
                //Check to see if no time is listed
                else if(list.get(i).getTime().returnTotalTimeSeconds() == -1.00)
                {               
                    noTime = true;
                    index = i;
                    break;
                }
                //Compare time with current highest
                else if(list.get(i).getTime().returnTotalTimeSeconds() < top.getTime().returnTotalTimeSeconds())
                {                
                    top = list.get(i);
                    index = i;
                }
            }
            
            if(noTime)
            {
                noTimesTemp.add(list.get(index));
            }
            else
            {
                temp.add(list.get(index));
            }            
            list.remove(index);                        
        }
        
        //Assign place values to those who had times. 
        for(int k = 0; k < temp.size(); k++)
        {
            temp.get(k).setPlace(k + 1);
        }
        
        //Assign "DNS" to runners without a time.     
        for(int l = 0; l < noTimesTemp.size(); l++)
        {
            noTimesTemp.get(l).setPlace(-1);
        }
        
        //Sort by lane those without a time.         
        while(noTimesTemp.size() != 0)
        {           
            int index = -1;
            for(int i = 0; i < noTimesTemp.size(); i++)
            {
                if(noTimesTemp.get(i).getLane() > -1)
                {                   
                    index = i;
                }
            }
            
            temp2.add(noTimesTemp.get(index));
            noTimesTemp.remove(index);            
        }
        
        //Reverse the order
        while(temp2.size() != 0)
        {
            temp.add(temp2.get(temp2.size() - 1));
            temp2.remove(temp2.size() -1);
        }
       
        //Temp now has the list of racers w/ places
        
        temp2.clear();
        
        boolean firstTime = true;
        int index = -1;
        
        while(temp.size() != 0)
        {           
            for(int i = 0; i < temp.size(); i++)
            {
                if(firstTime)
                {
                    index = i;
                    break;
                }
                else
                {
                    if(temp.get(i).getLane() < temp.get(index).getLane())
                    {
                        index = i;
                    }
                }
            }
            
            if(firstTime)
            {
                firstTime = false;
            }
            else if(index != -1)
            {
                temp2.add(temp.get(index));
                temp.remove(index);
                firstTime = true;
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Error! Empty Runner List! Terminating.", "Error", JOptionPane.ERROR_MESSAGE);
                System.exit(1);
            }

        }  
      
        return temp2;
    }
}
